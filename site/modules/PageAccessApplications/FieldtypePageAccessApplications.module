<?php

namespace ProcessWire;

class FieldtypePageAccessApplications extends FieldtypeMulti {
    public static function getModuleInfo() {
        return array(
            'title'     => 'Application Reference (multiple)',
            'version'   => 100,
            'summary'   => 'Field that stores a reference to one or more applications and makes them sortable.',
            'permanent' => false,
        );
    }

    public function getBlankValue(Page $page, Field $field) {
        return array();
    }

    public function sanitizeValue(Page $page, Field $field, $value) {
        if (!$value) {
            return array();
        }
        if (!is_array($value)) {
            $value = array($value);
        }

        foreach ($value as $k => $v) {
            // we allow integers
            if (is_int($v) && $this->wire('modules')->get('AppApi')->getApplication($v)) {
                continue;
            }

            // we allow applications
            if ($v instanceof Application) {
                continue;
            }

            // but we don't allow anything else
            unset($value[$k]);
        }

        return $value;
    }

    public function ___wakeupValue(Page $page, Field $field, $value) {
        $v = $this->getBlankValue($page, $field);

        if (empty($value)) {
            return $v;
        }

        if (is_string($value)) {
            $v[] = (int) $value;
        } else {
            foreach ($value as $id) {
                $v[] = (int) $id;
            }
        }

        return $v;
    }

    public function ___sleepValue(Page $page, Field $field, $value) {
        $a = array();

        foreach ($value as $application) {
            try {
                if (!is_int($application)) {
                    $application = $this->wire('modules')->get('AppApi')->getApplication($application)->getID();
                }
                $a[] = $application;
            }catch(\Throwable $e){
                continue;
            }
        }

        return $a;
    }

    /**
     * Instantiate the applications
     *
     * This method is only used when $page->outputFormatting is true.
     *
     */
    public function ___formatValue(Page $page, Field $field, $value) {
        foreach ($value as $k => $v) {
            if (!is_int($v)) {
                continue;
            }
            $application = $this->wire('modules')->get('AppApi')->getApplication($v);
            if ($application) {
                $value[$k] = $application;
            } else {
                unset($value[$k]);
            }
        }

        return $value;
    }

    public function getInputfield(Page $page, Field $field) {
        $inputfield = $this->modules->get('InputfieldAsmSelect');
        $inputfield->attr('name', $field->name);

        if (!empty($field->applicationTypes)) {
            $selector = 'id=';

            foreach ($field->applicationTypes as $appType) {
                $selector .= $appType . '|';
            }
            $selector    = rtrim($selector, '|');
            $applications = $this->wire('modules')->get('AppApi')->getApplications()->find($selector);
        } else {
            $applications = $this->wire('modules')->get('AppApi')->getApplications();
        }

        foreach ($applications as $application) {
            $id    = $application->getID();
            $label = $application->getTitle() . (!empty(Application::getAuthtypeLabel($application->getAuthtype())) ? ' (' . Application::getAuthtypeLabel($application->getAuthtype()) . ')' : '');
            $inputfield->addOption($id, $label);
        }

        return $inputfield;
    }

    public function getDatabaseSchema(Field $field) {
        $schema                 = parent::getDatabaseSchema($field);
        $schema['data']         = 'int NOT NULL';
        $schema['keys']['data'] = 'KEY data (data, pages_id, sort)';
        return $schema;
    }

    public function ___getCompatibleFieldtypes(Field $field) {
        $fieldtypes = new Fieldtypes();
        return $fieldtypes;
    }

    public function ___getConfigInputfields(Field $field) {
        $inputfields     = parent::___getConfigInputfields($field);
        $applicationTypes = array();
        $lastType        = '';

        $f = $this->modules->get('InputfieldCheckboxes');
        $f->attr('name', 'applicationTypes');

        foreach ($this->wire('modules')->get('AppApi')->getApplications() as $application) {
            if ($application->getID() == $lastType) {
                continue;
            }
            $f->addOption($application->getID(), $application->getTitle() . (!empty(Application::getAuthtypeLabel($application->getAuthtype())) ? ' (' . Application::getAuthtypeLabel($application->getAuthtype()) . ')' : ''));
            $lastType = $application->getID();
        }

        $f->attr('value', is_array($field->applicationTypes) ? $field->applicationTypes : array());
        $f->label       = 'Application Types';
        $f->description = 'Check all of the applications that may be selectable in this field. If none are selected, then all types will be allowed.';
        $inputfields->append($f);

        return $inputfields;
    }
}
